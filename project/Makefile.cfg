.DEFAULT_GOAL:=compile

RM = rm -rf
MKDIR = mkdir -p

DIR_DEP := .dep
DIR_BIN := bin
DIR_SRC := src
DIR_OBJ := .obj
DIRS := $(DIR_DEP) $(DIR_BIN) $(DIR_SRC) $(DIR_OBJ)
SRC := $(wildcard $(DIR_SRC)/*.c)
DEP := $(SRC:$(DIR_SRC)/%.c=$(DIR_DEP)/%.d)
OBJ=$(SRC:$(DIR_SRC)/%.c=$(DIR_OBJ)/%.o)

# definimos un nombre por defecto, si no se le definio uno en modulo.cfg
BIN?=sample.out

CURRENT_PATH!=pwd
BIN_FILE_EXTENSION=$(suffix $(BIN))
CURRENT_MODULE_NAME=$(notdir $(CURDIR))

DIR_LOGS:=logs

DIR_LIB_COMMONS=$(DIR_LIBS)/so-commons/src
DIR_LIB_COMMONS_BIN=$(DIR_LIB_COMMONS)/build

DIR_LIB_CPSEC=$(DIR_LIBS)/cspec
DIR_LIB_CPSEC_BIN=$(DIR_LIB_CPSEC)/release

CC:=gcc
INCLUDE+=-I./include

CFLAGS+=-g -Wall #-Wextra

# le avisamos al pre-procesador de C donde encontrar los archivos de cabecera .h
CPPFLAGS+=$(INCLUDE) -I$(DIR_LIB_COMMONS)

# gcc le indica al GNU linker la ruta donde buscar bibliotecas
LDFLAGS+=-L/usr/include -L$(DIR_LIB_COMMONS_BIN)

# gcc le indica al GNU linker que bibliotecas usar (agregar luego de los source files)
LDLIBS+=-lpthread -lcommons

# Ojo..! Estamos usando el operador "=" en vez de ":="
# porque queremos que expansión de la macro sea recursiva (la asignación se dará más adelante, cuando se use en una regla)
DEPFLAGS=-MT $@ -MMD -MP -MF $(DIR_DEP)/$*.tmp.d

MEMCHECK_FLAGS:=--leak-check=full --show-reachable=yes \
               --track-origins=yes

# se guardaran los .obj creados por los modulos que luego seran seran asociados por el Linker,
# para que los tests tengan el mismo comportamiento que los modulos
OBJS_REQUIRED_BY_TESTS?=

# con `undefine` hacemos que las macros tengan como valor una cadena vacia
undefine CMD_REDIRECT_LOGS
undefine AT

# Si ninguna shared/static library define una manera de compilar, entonces definimos esta por default
COMPILE?=$(CC) $(LDFLAGS) $(CFLAGS) $^ $(OBJS_REQUIRED_BY_TESTS) -o $@ $(LDLIBS)
COMPILE_DESCRIPTION?="Enlazamos los objetos (\"$(notdir $^)\") para crear el ejecutable ($(notdir $@)) en $(dir $@)"

# - evitamos definir los nombres de los parámetros que pasamos por terminal
# - alternativa: en la orden de una regla usar $(filter-out $@,$(MAKECMDGOALS))
ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))

# - requisito para que funcione el paso de parámetros sin warnings
# %:
# 	@:
