bool algoritmo_cargado_es(char * algoritmo);
bool hay_algun_proceso_ejecutando();
char * obtener_algoritmo_cargado();
int calcular_estimacion_rafaga(t_pcb * pcb);
int conectarse_a_cpu(char * conexion_puerto);
int conectarse_a_memoria();
int main();
int obtener_cantidad_procesos_disponibles_en_memoria();
int obtener_tiempo_maximo_bloqueado();
int pcb_get_posicion(t_pcb * pcb,t_list * lista);
int pcb_tiempo_restante_de_ejecucion(t_pcb * pcb);
t_cola_planificacion * cola_planificacion_create();
t_pcb * elegir_pcb_fifo(t_cola_planificacion * cola);
t_pcb * elegir_pcb_segun_algoritmo(t_cola_planificacion * cola);
t_pcb * elegir_pcb_srt(t_cola_planificacion * cola);
t_pcb * pcb_menor_tiempo_restante_de_ejecucion_entre(t_pcb * pcb1,t_pcb * pcb2);
void * escuchar_conexion_cpu_dispatch();
void * escuchar_conexiones_entrantes();
void * escuchar_nueva_conexion(void * args);
void * gestor_de_procesos_bloqueados();
void * iniciar_corto_plazo();
void * iniciar_largo_plazo();
void * iniciar_mediano_plazo();
void * plp_pcb_finished();
void agregar_pcb_a_cola(t_pcb * pcb,t_cola_planificacion * cola);
void asignar_estimacion_rafaga_inicial(t_pcb * pcb);
void asignar_pid(t_pcb * pcb);
void avisar_a_pcp_que_decida();
void cambiar_estado_pcb(t_pcb * pcb,t_pcb_estado nuevoEstado);
void cola_destroy(t_cola_planificacion * cola);
void controlar_procesos_disponibles_en_memoria(int llamado_por_plp);
void ejecutar_proceso(t_pcb * pcb);
void enviar_interrupcion();
void escuchar_conexion_con_memoria();
void evaluar_replanificacion_pcp();
void imprimir_cantidad_procesos_disponibles_en_memoria();
void imprimir_proceso_en_running();
void inicializar_grado_multiprogramacion();
void iniciar_conexion_cpu_dispatch();
void iniciar_planificacion();
void liberar_cpu();
void liberar_espacio_en_memoria_para_proceso();
void pmp_suspender_proceso(t_pcb * pcb);
void remover_pcb_de_cola(t_pcb * pcb,t_cola_planificacion * cola);
void timer_suspension_proceso(t_pcb * pcb);
void transicion_a_new(t_pcb * pcb);
void transicion_blocked_a_ready(t_pcb * pcb);
void transicion_blocked_a_susready(t_pcb * pcb);
void transicion_new_a_ready(t_pcb * pcb);
void transicion_ready_a_running(t_pcb * pcb);
void transicion_running_a_blocked(t_pcb * pcb);
void transicion_running_a_finished(t_pcb * pcb);
void transicion_susready_a_ready(t_pcb * pcb);
