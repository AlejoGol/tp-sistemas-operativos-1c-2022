RM = rm -rfv
MKDIR = mkdir -p

.DEFAULT_GOAL := build

DIR_DEP := .dep
DIR_BIN := bin
DIR_SRC := src
DIR_OBJ := .obj
DIRS := $(DIR_DEP) $(DIR_BIN) $(DIR_SRC) $(DIR_OBJ)
SRC := $(wildcard $(DIR_SRC)/*.c)
DEP := $(SRC:$(DIR_SRC)/%.c=$(DIR_DEP)/%.d)
OBJ := $(SRC:$(DIR_SRC)/%.c=$(DIR_OBJ)/%.o)
BIN := sample.out

DIR_LOGS := logs
DIR_LIB_COMMONS := /home/so-commons/src
DIR_LIB_COMMONS_BIN := $(DIR_LIB_COMMONS)/build

CC := gcc
CFLAGS := -g -Wall #-Wextra
INCLUDE :=./include

MEMCHECK_FLAGS := --leak-check=full --show-reachable=yes \
                  --track-origins=yes --log-file="logs/memcheck.log"

# le avisamos al pre-procesador de C donde encontrar los archivos de cabecera .h
CPPFLAGS :=-I$(INCLUDE) -I$(DIR_LIB_COMMONS)

# gcc le indica al GNU linker la ruta donde buscar bibliotecas
LDFLAGS := -L/usr/include -L$(DIR_LIB_COMMONS_BIN)

# gcc le indica al GNU linker que bibliotecas usar (agregar luego de los source files)
LDLIBS := -lpthread -lcommons

# Ojo..! Estamos usando el operador "=" en vez de ":="
# porque queremos que expansi칩n de la macro sea recursiva (la asignaci칩n se dar치 m치s adelante, cuando se use en una regla)
DEPFLAGS = -MT $@ -MMD -MP -MF $(DIR_DEP)/$*.tmp.d
